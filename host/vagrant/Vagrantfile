# # -*- mode: ruby -*-
# # vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
Vagrant.require_version '>= 1.8.1'


# Cross-platform way of finding an executable in the $PATH.
def which(cmd)
  exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exts.each { |ext|
      exe = File.join(path, "#{cmd}#{ext}")
      return exe if File.executable?(exe) && !File.directory?(exe)
    }
  end
  return nil
end

# Use oah-config.yml for basic VM configuration.
require 'yaml'


#dir = File.dirname(File.expand_path(__FILE__))
dir = File.dirname("../../../")

if !File.exist?("#{dir}/oah-config.yml")
  raise "Configuration file #{dir}/oah-config.yml not found!  Please copy example.oah-config.yml to oah-config.yml and try again."
end
vconfig = YAML::load_file("#{dir}/oah-config.yml")


$script_local_ansible = <<SCRIPT
git config --global http.sslverify false
git clone $OAH_GITHUB_URL/$env_repo_name.git
sudo sed -i 's/archive/in.archive/g' /etc/apt/sources.list
sudo apt-get update
sudo apt install software-properties-common
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update
sudo apt install python3.8
sudo apt install python3-pip
python3 -m pip install --user ansible

echo 'export PATH="$PATH:'/home/vagrant/.local/bin'"' >> ~/.bashrc
echo 'export PATH="$PATH:'/home/vagrant/.local/bin'"' >> ~/.zshrc
bash

mkdir -p $VHOME/$env_repo_name/roles
ansible-galaxy install -r $VHOME/$env_repo_name/provisioning/oah-requirements.yml -p $VHOME/$env_repo_name/provisioning/roles
echo "TEST Passed"
ansible-playbook  --extra-vars "ansible_become_pass=vagrant"  $VHOME/$env_repo_name/provisioning/oah-install.yml
SCRIPT

$script = <<SCRIPT
echo "create user vagrant"
adduser --disabled-password --gecos "" vagrant
echo 'vagrant:vagrant' | chpasswd
ls -al /home/
echo "add sudo privilege to user vagrant"
cp /etc/sudoers.d/90-cloud-init-users /etc/sudoers.d/admin
chmod +w /etc/sudoers.d/admin
ls -al /etc/sudoers.d/
sed -i 's/ubuntu/vagrant/g' /etc/sudoers.d/admin
cat /etc/sudoers.d/admin
echo "enable ssh access for user vagrant"
echo "generating authorized_keys"
ls /home/ubuntu/.ssh/
cp /home/ubuntu/.ssh/id_rsa.pub /home/ubuntu/.ssh/authorized_keys
chmod 600 /home/ubuntu/.ssh/authorized_keys
mkdir -p /home/vagrant/.ssh
echo "listing contents of under /home/ubuntu/.ssh"
ls /home/ubuntu/.ssh
chown vagrant:vagrant /home/vagrant/.ssh
cat /home/ubuntu/.ssh/authorized_keys >> /home/vagrant/.ssh/authorized_keys
echo "value of authorized_keys under ubuntu"
cat /home/ubuntu/.ssh/authorized_keys
echo "value of authorized_keys under vagrant"
cat /home/vagrant/.ssh/authorized_keys
chown vagrant:vagrant /home/vagrant/.ssh/authorized_keys
su - vagrant -c "cat /home/vagrant/.ssh/authorized_keys"
chmod 600 /home/vagrant/.ssh/authorized_keys
ls -al /home/vagrant/.ssh
chmod 700 /home/vagrant/.ssh
ls -al /home/vagrant
sudo apt update -y
sudo apt full-upgrade -y
sudo apt install -y python3-pip
python3 -m pip install --user ansible
sudo systemctl disable apt-daily.service
sudo systemctl disable apt-daily.timer
SCRIPT

# $script = <<SCRIPT
# echo "create user vagrant"
# adduser --disabled-password --gecos "" vagrant
# echo 'vagrant:vagrant' | chpasswd
# ls -al /home/
# echo "add sudo privilege to user vagrant"
# cp /etc/sudoers.d/90-cloud-init-users /etc/sudoers.d/admin
# chmod +w /etc/sudoers.d/admin
# ls -al /etc/sudoers.d/
# sed -i 's/ubuntu/vagrant/g' /etc/sudoers.d/admin
# cat /etc/sudoers.d/admin
# echo "enable ssh access for user vagrant"
# rm -rf /home/ubuntu/.ssh
# echo "generating new ssh key pairs"
# ssh-keygen -t rsa -f /home/ubuntu/.ssh/
# echo "generating authorized_keys"
# ls /home/ubuntu/.ssh/
# cp /home/ubuntu/.ssh/id_rsa.pub /home/ubuntu/.ssh/authorized_keys
# chmod 600 /home/ubuntu/.ssh/authorized_keys
# mkdir -p /home/vagrant/.ssh
# echo "listing contents of under /home/ubuntu/.ssh"
# ls /home/ubuntu/.ssh
# chown vagrant:vagrant /home/vagrant/.ssh
# cat /home/ubuntu/.ssh/authorized_keys >> /home/vagrant/.ssh/authorized_keys
# echo "value of authorized_keys under ubuntu"
# cat /home/ubuntu/.ssh/authorized_keys
# echo "value of authorized_keys under vagrant"
# cat /home/vagrant/.ssh/authorized_keys
# chown vagrant:vagrant /home/vagrant/.ssh/authorized_keys
# su - vagrant -c "cat /home/vagrant/.ssh/authorized_keys"
# chmod 600 /home/vagrant/.ssh/authorized_keys
# ls -al /home/vagrant/.ssh
# chmod 700 /home/vagrant/.ssh
# ls -al /home/vagrant
# sudo apt update -y
# sudo apt full-upgrade -y
# sudo apt-get autoremove -y
# test -e /usr/bin/python || (sudo apt -y update && apt install -y python-minimal)
# sudo systemctl disable apt-daily.service
# sudo systemctl disable apt-daily.timer
# SCRIPT


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.hostname = vconfig['vagrant_hostname']
  if vconfig['vagrant_ip'] == "0.0.0.0" && Vagrant.has_plugin?("vagrant-auto_network")
    config.vm.network :private_network, :ip => vconfig['vagrant_ip'], :auto_network => true
  else
    config.vm.network :private_network, ip: vconfig['vagrant_ip']
  end

  if !vconfig['vagrant_public_ip'].empty? && vconfig['vagrant_public_ip'] == "0.0.0.0"
    config.vm.network :public_network
  elsif !vconfig['vagrant_public_ip'].empty?
    config.vm.network :public_network, ip: vconfig['vagrant_public_ip']
  end

  # # Autoconfigure hosts. This will copy the private network addresses from
  # # each VM and update hosts entries on all other machines. No further
  # # configuration is needed.
  # Vagrant.configure('2') do |config|

  #   config.vm.define :first do |node|
  #     node.vm.box = ""
  #     node.vm.network :private_network, :ip => '10.20.1.2'
  #     node.vm.provision :hosts, :sync_hosts => true
  #   end

  #   config.vm.define :second do |node|
  #     node.vm.box = "ubuntu/bionic64"
  #     node.vm.network :private_network, :ip => '10.20.1.3'
  #     node.vm.provision :hosts, :sync_hosts => true
  #   end
  # end

  # config.ssh.insert_key = true
  # config.ssh.forward_agent = true
  # config.ssh.username = vconfig['vagrant_user']

  Vagrant.configure("2") do |config|
    config.vm.provision "ansible" do |ansible|
      ansible.version = "2.14.4" # Specify the version you want to useend
    end
    config.ssh.insert_key = true
    config.ssh.private_key_path = "~/.ssh/id_rsa"
    config.ssh.private_key_path = ['~/.vagrant.d/insecure_private_key', '~/.ssh/id_rsa']
    config.ssh.forward_agent = true
    config.ssh.username = vconfig['vagrant_user']
  end

  #config.ssh.private_key_path = ['~/.vagrant.d/insecure_private_key', '~/.ssh/id_rsa']

  config.vm.box = vconfig['vagrant_box']

  # If hostsupdater plugin is installed, add all server names as aliases.
  # if Vagrant.has_plugin?("vagrant-hostsupdater")
  #   config.hostsupdater.aliases = []
  #   # Add all hosts that aren't defined as Ansible vars.
  #   if vconfig['oahvm_webserver'] == "apache"
  #     for host in vconfig['apache_vhosts']
  #       unless host['servername'].include? "{{"
  #         config.hostsupdater.aliases.push(host['servername'])
  #       end
  #     end
  #   else
  #     for host in vconfig['nginx_hosts']
  #       unless host['server_name'].include? "{{"
  #         config.hostsupdater.aliases.push(host['server_name'])
  #       end
  #     end
  #   end
  # end

  for synced_folder in vconfig['vagrant_synced_folders'];
    config.vm.synced_folder synced_folder['local_path'], synced_folder['destination'],
      type: synced_folder['type'],
      rsync__auto: "true",
      rsync__exclude: synced_folder['excluded_paths'],
      rsync__args: ["--verbose", "--archive", "--delete", "-z", "--chmod=ugo=rwX"],
      id: synced_folder['id'],
      create: synced_folder.include?('create') ? synced_folder['create'] : false,
      mount_options: synced_folder.include?('mount_options') ? synced_folder['mount_options'] : []
  end
  
  
  if which('ansible-playbook')
    # Provision using Ansible provisioner if Ansible is installed on host.
    config.vm.provision "shell", inline: $script
    config.vm.provision "shell", inline: <<-SHELL
      echo 'export PATH="$PATH:/root/.local/bin"' >> /root/.bashrc
      source /root/.bashrc
    SHELL

    config.vm.provision "ansible" do |ansible|
      ansible.playbook = "#{dir}/provisioning/oah-install.yml"
      ansible.galaxy_role_file = "../../provisioning/oah-requirements.yml"
      ansible.become = true                                                                                                                
    end
  else
     config.vm.provision "shell", inline: $script_local_ansible, env: { "VHOME" => "/home/vagrant", "env_repo_name" => ENV['env_repo_name'], "OAH_DIR" => ENV['OAH_DIR'], "OAH_GITHUB_URL" => ENV['OAH_GITHUB_URL'] } 
      #config.vm.provision "ansible_local" do |ansible|
      # ansible.playbook = "../../provisioning/oah-install.yml"
      #ansible.playbook = "../../provisioning/oah-install.yml"
      #ansible.galaxy_role_file = "../../provisioning/oah-requirements.yml"
      #end
  end


  # VirtualBox.
  config.vm.provider :virtualbox do |v|
    v.name = vconfig['vagrant_hostname']
    v.memory = vconfig['vagrant_memory']
    v.cpus = vconfig['vagrant_cpus']
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    v.customize ["modifyvm", :id, "--ioapic", "on"]
    v.customize ["modifyvm", :id, "--vram", vconfig['video_memory']]
    v.gui=vconfig['oah_vm_gui']
  end
  config.vm.define vconfig['vagrant_machine_name'] do |d|
  end
end
